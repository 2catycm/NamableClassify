__version__ = "0.0.2"
import lazy_loader


__getattr__, __dir__, __all__ = lazy_loader.attach(
    __name__,
    submodules={
        'auto',
        'data',
        'help',
        'infra',
        'metrics',
        'nucleus',
    },
    submod_attrs={
        'auto': [
            'ComplexEncoder',
            'PostgresDatabaseConfig',
            'auto_exp_runs_path',
            'auto_run',
            'auto_run_running_path',
            'auto_try_decorator',
            'backbone_name2pe',
            'command_executor',
            'database_config_path',
            'database_name',
            'delta_to_try',
            'end',
            'examples',
            'experiment',
            'fixed_meta_parameters',
            'full_finetune',
            'host',
            'infra',
            'learning_rate_exec',
            'learning_rates',
            'mutiple',
            'objective',
            'password',
            'peft_to_try',
            'port',
            'postgres_url',
            'run',
            'run_names',
            'run_with_config',
            'seed',
            'single',
            'sqlite_url',
            'start',
            'study',
            'study_path',
            'study_results',
            'username',
            'yuequ_to_try',
        ],
        'data': [
            'CIFAR100DataModule',
            'CIFAR10DataModule',
            'ClassificationDataConfig',
            'ClassificationDataModule',
            'CutoutPIL',
            'FashionMNISTDataModule',
            'KMNISTTDataModule',
            'MNISTDataModule',
            'QMNISTDataModule',
            'TorchVisionDataModule',
            'cls_names_of',
            'dataloader_to_arrays',
            'infra',
            'simple_pixel_flatten_transform',
            'sksplit_for_torch',
            'transforms',
            'vtab_1k',
        ],
        'help': [
            'lib_paths',
        ],
        'infra': [
            'memory',
        ],
        'metrics': [
            'compute_classification_metrics',
            'draw_classification_metrics',
            'except_roc_auc_score',
            'get_top_bottom_k_classes',
            'list_i_terms',
            'per_class_accuracy',
        ],
        'nucleus': [
            'ClassificationModelConfig',
            'ClassificationTask',
            'ClassificationTaskConfig',
            'HuggingfaceModel',
        ],
    },
)

__all__ = ['CIFAR100DataModule', 'CIFAR10DataModule',
           'ClassificationDataConfig', 'ClassificationDataModule',
           'ClassificationModelConfig', 'ClassificationTask',
           'ClassificationTaskConfig', 'ComplexEncoder', 'CutoutPIL',
           'FashionMNISTDataModule', 'HuggingfaceModel', 'KMNISTTDataModule',
           'MNISTDataModule', 'PostgresDatabaseConfig', 'QMNISTDataModule',
           'TorchVisionDataModule', 'auto', 'auto_exp_runs_path', 'auto_run',
           'auto_run_running_path', 'auto_try_decorator', 'backbone_name2pe',
           'cls_names_of', 'command_executor',
           'compute_classification_metrics', 'data', 'database_config_path',
           'database_name', 'dataloader_to_arrays', 'delta_to_try',
           'draw_classification_metrics', 'end', 'examples',
           'except_roc_auc_score', 'experiment', 'fixed_meta_parameters',
           'full_finetune', 'get_top_bottom_k_classes', 'help', 'host',
           'infra', 'learning_rate_exec', 'learning_rates', 'lib_paths',
           'list_i_terms', 'memory', 'metrics', 'mutiple', 'nucleus',
           'objective', 'password', 'peft_to_try', 'per_class_accuracy',
           'port', 'postgres_url', 'run', 'run_names', 'run_with_config',
           'seed', 'simple_pixel_flatten_transform', 'single',
           'sksplit_for_torch', 'sqlite_url', 'start', 'study', 'study_path',
           'study_results', 'transforms', 'username', 'vtab_1k',
           'yuequ_to_try']
